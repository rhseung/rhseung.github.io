/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LinkRouteImport } from './routes/link'
import { Route as CareerRouteImport } from './routes/career'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ProjectIndexRouteImport } from './routes/project/index'
import { Route as BlogIndexRouteImport } from './routes/blog/index'
import { Route as ProjectIdRouteImport } from './routes/project/$id'
import { Route as BlogIdRouteImport } from './routes/blog/$id'

const LinkRoute = LinkRouteImport.update({
  id: '/link',
  path: '/link',
  getParentRoute: () => rootRouteImport,
} as any)
const CareerRoute = CareerRouteImport.update({
  id: '/career',
  path: '/career',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ProjectIndexRoute = ProjectIndexRouteImport.update({
  id: '/project/',
  path: '/project/',
  getParentRoute: () => rootRouteImport,
} as any)
const BlogIndexRoute = BlogIndexRouteImport.update({
  id: '/blog/',
  path: '/blog/',
  getParentRoute: () => rootRouteImport,
} as any)
const ProjectIdRoute = ProjectIdRouteImport.update({
  id: '/project/$id',
  path: '/project/$id',
  getParentRoute: () => rootRouteImport,
} as any)
const BlogIdRoute = BlogIdRouteImport.update({
  id: '/blog/$id',
  path: '/blog/$id',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/career': typeof CareerRoute
  '/link': typeof LinkRoute
  '/blog/$id': typeof BlogIdRoute
  '/project/$id': typeof ProjectIdRoute
  '/blog': typeof BlogIndexRoute
  '/project': typeof ProjectIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/career': typeof CareerRoute
  '/link': typeof LinkRoute
  '/blog/$id': typeof BlogIdRoute
  '/project/$id': typeof ProjectIdRoute
  '/blog': typeof BlogIndexRoute
  '/project': typeof ProjectIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/career': typeof CareerRoute
  '/link': typeof LinkRoute
  '/blog/$id': typeof BlogIdRoute
  '/project/$id': typeof ProjectIdRoute
  '/blog/': typeof BlogIndexRoute
  '/project/': typeof ProjectIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/career'
    | '/link'
    | '/blog/$id'
    | '/project/$id'
    | '/blog'
    | '/project'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/career'
    | '/link'
    | '/blog/$id'
    | '/project/$id'
    | '/blog'
    | '/project'
  id:
    | '__root__'
    | '/'
    | '/career'
    | '/link'
    | '/blog/$id'
    | '/project/$id'
    | '/blog/'
    | '/project/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CareerRoute: typeof CareerRoute
  LinkRoute: typeof LinkRoute
  BlogIdRoute: typeof BlogIdRoute
  ProjectIdRoute: typeof ProjectIdRoute
  BlogIndexRoute: typeof BlogIndexRoute
  ProjectIndexRoute: typeof ProjectIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/link': {
      id: '/link'
      path: '/link'
      fullPath: '/link'
      preLoaderRoute: typeof LinkRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/career': {
      id: '/career'
      path: '/career'
      fullPath: '/career'
      preLoaderRoute: typeof CareerRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/project/': {
      id: '/project/'
      path: '/project'
      fullPath: '/project'
      preLoaderRoute: typeof ProjectIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/blog/': {
      id: '/blog/'
      path: '/blog'
      fullPath: '/blog'
      preLoaderRoute: typeof BlogIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/project/$id': {
      id: '/project/$id'
      path: '/project/$id'
      fullPath: '/project/$id'
      preLoaderRoute: typeof ProjectIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/blog/$id': {
      id: '/blog/$id'
      path: '/blog/$id'
      fullPath: '/blog/$id'
      preLoaderRoute: typeof BlogIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CareerRoute: CareerRoute,
  LinkRoute: LinkRoute,
  BlogIdRoute: BlogIdRoute,
  ProjectIdRoute: ProjectIdRoute,
  BlogIndexRoute: BlogIndexRoute,
  ProjectIndexRoute: ProjectIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
